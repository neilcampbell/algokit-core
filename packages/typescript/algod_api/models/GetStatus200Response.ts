/**
 * Algod REST API.
 * API endpoint for algod operations.
 *
 * OpenAPI spec version: 0.0.1
 * Contact: contact@algorand.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* NodeStatus contains the information about a node status
*/
export class GetStatus200Response {
    /**
    * CatchupTime in nanoseconds
    */
    'catchupTime': number;
    /**
    * LastRound indicates the last round seen
    */
    'lastRound': number;
    /**
    * LastVersion indicates the last consensus version supported
    */
    'lastVersion': string;
    /**
    * NextVersion of consensus protocol to use
    */
    'nextVersion': string;
    /**
    * NextVersionRound is the round at which the next consensus version will apply
    */
    'nextVersionRound': number;
    /**
    * NextVersionSupported indicates whether the next consensus version is supported by this node
    */
    'nextVersionSupported': boolean;
    /**
    * StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress
    */
    'stoppedAtUnsupportedRound': boolean;
    /**
    * TimeSinceLastRound in nanoseconds
    */
    'timeSinceLastRound': number;
    /**
    * The last catchpoint seen by the node
    */
    'lastCatchpoint'?: string;
    /**
    * The current catchpoint that is being caught up to
    */
    'catchpoint'?: string;
    /**
    * The total number of accounts included in the current catchpoint
    */
    'catchpointTotalAccounts'?: number;
    /**
    * The number of accounts from the current catchpoint that have been processed so far as part of the catchup
    */
    'catchpointProcessedAccounts'?: number;
    /**
    * The number of accounts from the current catchpoint that have been verified so far as part of the catchup
    */
    'catchpointVerifiedAccounts'?: number;
    /**
    * The total number of key-values (KVs) included in the current catchpoint
    */
    'catchpointTotalKvs'?: number;
    /**
    * The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup
    */
    'catchpointProcessedKvs'?: number;
    /**
    * The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup
    */
    'catchpointVerifiedKvs'?: number;
    /**
    * The total number of blocks that are required to complete the current catchpoint catchup
    */
    'catchpointTotalBlocks'?: number;
    /**
    * The number of blocks that have already been obtained by the node as part of the catchup
    */
    'catchpointAcquiredBlocks'?: number;
    /**
    * Upgrade delay
    */
    'upgradeDelay'?: number;
    /**
    * This node\'s upgrade vote
    */
    'upgradeNodeVote'?: boolean;
    /**
    * Yes votes required for consensus upgrade
    */
    'upgradeVotesRequired'?: number;
    /**
    * Total votes cast for consensus upgrade
    */
    'upgradeVotes'?: number;
    /**
    * Yes votes cast for consensus upgrade
    */
    'upgradeYesVotes'?: number;
    /**
    * No votes cast for consensus upgrade
    */
    'upgradeNoVotes'?: number;
    /**
    * Next protocol round
    */
    'upgradeNextProtocolVoteBefore'?: number;
    /**
    * Total voting rounds for current upgrade
    */
    'upgradeVoteRounds'?: number;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "catchupTime",
            "baseName": "catchup-time",
            "type": "number",
            "format": ""
        },
        {
            "name": "lastRound",
            "baseName": "last-round",
            "type": "number",
            "format": ""
        },
        {
            "name": "lastVersion",
            "baseName": "last-version",
            "type": "string",
            "format": ""
        },
        {
            "name": "nextVersion",
            "baseName": "next-version",
            "type": "string",
            "format": ""
        },
        {
            "name": "nextVersionRound",
            "baseName": "next-version-round",
            "type": "number",
            "format": ""
        },
        {
            "name": "nextVersionSupported",
            "baseName": "next-version-supported",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "stoppedAtUnsupportedRound",
            "baseName": "stopped-at-unsupported-round",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "timeSinceLastRound",
            "baseName": "time-since-last-round",
            "type": "number",
            "format": ""
        },
        {
            "name": "lastCatchpoint",
            "baseName": "last-catchpoint",
            "type": "string",
            "format": ""
        },
        {
            "name": "catchpoint",
            "baseName": "catchpoint",
            "type": "string",
            "format": ""
        },
        {
            "name": "catchpointTotalAccounts",
            "baseName": "catchpoint-total-accounts",
            "type": "number",
            "format": ""
        },
        {
            "name": "catchpointProcessedAccounts",
            "baseName": "catchpoint-processed-accounts",
            "type": "number",
            "format": ""
        },
        {
            "name": "catchpointVerifiedAccounts",
            "baseName": "catchpoint-verified-accounts",
            "type": "number",
            "format": ""
        },
        {
            "name": "catchpointTotalKvs",
            "baseName": "catchpoint-total-kvs",
            "type": "number",
            "format": ""
        },
        {
            "name": "catchpointProcessedKvs",
            "baseName": "catchpoint-processed-kvs",
            "type": "number",
            "format": ""
        },
        {
            "name": "catchpointVerifiedKvs",
            "baseName": "catchpoint-verified-kvs",
            "type": "number",
            "format": ""
        },
        {
            "name": "catchpointTotalBlocks",
            "baseName": "catchpoint-total-blocks",
            "type": "number",
            "format": ""
        },
        {
            "name": "catchpointAcquiredBlocks",
            "baseName": "catchpoint-acquired-blocks",
            "type": "number",
            "format": ""
        },
        {
            "name": "upgradeDelay",
            "baseName": "upgrade-delay",
            "type": "number",
            "format": ""
        },
        {
            "name": "upgradeNodeVote",
            "baseName": "upgrade-node-vote",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "upgradeVotesRequired",
            "baseName": "upgrade-votes-required",
            "type": "number",
            "format": ""
        },
        {
            "name": "upgradeVotes",
            "baseName": "upgrade-votes",
            "type": "number",
            "format": ""
        },
        {
            "name": "upgradeYesVotes",
            "baseName": "upgrade-yes-votes",
            "type": "number",
            "format": ""
        },
        {
            "name": "upgradeNoVotes",
            "baseName": "upgrade-no-votes",
            "type": "number",
            "format": ""
        },
        {
            "name": "upgradeNextProtocolVoteBefore",
            "baseName": "upgrade-next-protocol-vote-before",
            "type": "number",
            "format": ""
        },
        {
            "name": "upgradeVoteRounds",
            "baseName": "upgrade-vote-rounds",
            "type": "number",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return GetStatus200Response.attributeTypeMap;
    }

    public constructor() {
    }
}
