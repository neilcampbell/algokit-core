# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from algokit_algod_api.models.application_kv_storage import ApplicationKVStorage
from typing import Optional, Set
from typing_extensions import Self

class ApplicationInitialStates(BaseModel):
    """
    An application's initial global/local/box states that were accessed during simulation.
    """ # noqa: E501
    id: StrictInt = Field(description="Application index.")
    app_locals: Optional[List[ApplicationKVStorage]] = Field(default=None, description="An application's initial local states tied to different accounts.", alias="app-locals")
    app_globals: Optional[ApplicationKVStorage] = Field(default=None, alias="app-globals")
    app_boxes: Optional[ApplicationKVStorage] = Field(default=None, alias="app-boxes")
    __properties: ClassVar[List[str]] = ["id", "app-locals", "app-globals", "app-boxes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationInitialStates from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in app_locals (list)
        _items = []
        if self.app_locals:
            for _item_app_locals in self.app_locals:
                if _item_app_locals:
                    _items.append(_item_app_locals.to_dict())
            _dict['app-locals'] = _items
        # override the default output from pydantic by calling `to_dict()` of app_globals
        if self.app_globals:
            _dict['app-globals'] = self.app_globals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of app_boxes
        if self.app_boxes:
            _dict['app-boxes'] = self.app_boxes.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationInitialStates from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "app-locals": [ApplicationKVStorage.from_dict(_item) for _item in obj["app-locals"]] if obj.get("app-locals") is not None else None,
            "app-globals": ApplicationKVStorage.from_dict(obj["app-globals"]) if obj.get("app-globals") is not None else None,
            "app-boxes": ApplicationKVStorage.from_dict(obj["app-boxes"]) if obj.get("app-boxes") is not None else None
        })
        return _obj


