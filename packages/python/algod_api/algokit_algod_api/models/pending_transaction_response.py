# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from algokit_algod_api.models.account_state_delta import AccountStateDelta
from algokit_algod_api.models.eval_delta_key_value import EvalDeltaKeyValue
from typing import Optional, Set
from typing_extensions import Self

class PendingTransactionResponse(BaseModel):
    """
    Details about a pending transaction. If the transaction was recently confirmed, includes confirmation details like the round and reward details.
    """ # noqa: E501
    asset_index: Optional[StrictInt] = Field(default=None, description="The asset index if the transaction was found and it created an asset.", alias="asset-index")
    application_index: Optional[StrictInt] = Field(default=None, description="The application index if the transaction was found and it created an application.", alias="application-index")
    close_rewards: Optional[StrictInt] = Field(default=None, description="Rewards in microalgos applied to the close remainder to account.", alias="close-rewards")
    closing_amount: Optional[StrictInt] = Field(default=None, description="Closing amount for the transaction.", alias="closing-amount")
    asset_closing_amount: Optional[StrictInt] = Field(default=None, description="The number of the asset's unit that were transferred to the close-to address.", alias="asset-closing-amount")
    confirmed_round: Optional[StrictInt] = Field(default=None, description="The round where this transaction was confirmed, if present.", alias="confirmed-round")
    pool_error: StrictStr = Field(description="Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error. ", alias="pool-error")
    receiver_rewards: Optional[StrictInt] = Field(default=None, description="Rewards in microalgos applied to the receiver account.", alias="receiver-rewards")
    sender_rewards: Optional[StrictInt] = Field(default=None, description="Rewards in microalgos applied to the sender account.", alias="sender-rewards")
    local_state_delta: Optional[List[AccountStateDelta]] = Field(default=None, description="Local state key/value changes for the application being executed by this transaction.", alias="local-state-delta")
    global_state_delta: Optional[List[EvalDeltaKeyValue]] = Field(default=None, description="Application state delta.", alias="global-state-delta")
    logs: Optional[List[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]]] = Field(default=None, description="Logs for the application being executed by this transaction.")
    inner_txns: Optional[List[PendingTransactionResponse]] = Field(default=None, description="Inner transactions produced by application execution.", alias="inner-txns")
    txn: Dict[str, Any] = Field(description="The raw signed transaction.")
    __properties: ClassVar[List[str]] = ["asset-index", "application-index", "close-rewards", "closing-amount", "asset-closing-amount", "confirmed-round", "pool-error", "receiver-rewards", "sender-rewards", "local-state-delta", "global-state-delta", "logs", "inner-txns", "txn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PendingTransactionResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in local_state_delta (list)
        _items = []
        if self.local_state_delta:
            for _item_local_state_delta in self.local_state_delta:
                if _item_local_state_delta:
                    _items.append(_item_local_state_delta.to_dict())
            _dict['local-state-delta'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in global_state_delta (list)
        _items = []
        if self.global_state_delta:
            for _item_global_state_delta in self.global_state_delta:
                if _item_global_state_delta:
                    _items.append(_item_global_state_delta.to_dict())
            _dict['global-state-delta'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inner_txns (list)
        _items = []
        if self.inner_txns:
            for _item_inner_txns in self.inner_txns:
                if _item_inner_txns:
                    _items.append(_item_inner_txns.to_dict())
            _dict['inner-txns'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PendingTransactionResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "asset-index": obj.get("asset-index"),
            "application-index": obj.get("application-index"),
            "close-rewards": obj.get("close-rewards"),
            "closing-amount": obj.get("closing-amount"),
            "asset-closing-amount": obj.get("asset-closing-amount"),
            "confirmed-round": obj.get("confirmed-round"),
            "pool-error": obj.get("pool-error"),
            "receiver-rewards": obj.get("receiver-rewards"),
            "sender-rewards": obj.get("sender-rewards"),
            "local-state-delta": [AccountStateDelta.from_dict(_item) for _item in obj["local-state-delta"]] if obj.get("local-state-delta") is not None else None,
            "global-state-delta": [EvalDeltaKeyValue.from_dict(_item) for _item in obj["global-state-delta"]] if obj.get("global-state-delta") is not None else None,
            "logs": obj.get("logs"),
            "inner-txns": [PendingTransactionResponse.from_dict(_item) for _item in obj["inner-txns"]] if obj.get("inner-txns") is not None else None,
            "txn": obj.get("txn")
        })
        return _obj

# TODO: Rewrite to not use raise_errors
PendingTransactionResponse.model_rebuild(raise_errors=False)

