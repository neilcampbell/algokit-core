# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from algokit_algod_api.models.pending_transaction_response import PendingTransactionResponse
from algokit_algod_api.models.simulate_unnamed_resources_accessed import SimulateUnnamedResourcesAccessed
from algokit_algod_api.models.simulation_transaction_exec_trace import SimulationTransactionExecTrace
from typing import Optional, Set
from typing_extensions import Self

class SimulateTransactionResult(BaseModel):
    """
    Simulation result for an individual transaction
    """ # noqa: E501
    txn_result: PendingTransactionResponse = Field(alias="txn-result")
    app_budget_consumed: Optional[StrictInt] = Field(default=None, description="Budget used during execution of an app call transaction. This value includes budged used by inner app calls spawned by this transaction.", alias="app-budget-consumed")
    logic_sig_budget_consumed: Optional[StrictInt] = Field(default=None, description="Budget used during execution of a logic sig transaction.", alias="logic-sig-budget-consumed")
    exec_trace: Optional[SimulationTransactionExecTrace] = Field(default=None, alias="exec-trace")
    unnamed_resources_accessed: Optional[SimulateUnnamedResourcesAccessed] = Field(default=None, alias="unnamed-resources-accessed")
    fixed_signer: Optional[StrictStr] = Field(default=None, description="The account that needed to sign this transaction when no signature was provided and the provided signer was incorrect.", alias="fixed-signer")
    __properties: ClassVar[List[str]] = ["txn-result", "app-budget-consumed", "logic-sig-budget-consumed", "exec-trace", "unnamed-resources-accessed", "fixed-signer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulateTransactionResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of txn_result
        if self.txn_result:
            _dict['txn-result'] = self.txn_result.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exec_trace
        if self.exec_trace:
            _dict['exec-trace'] = self.exec_trace.to_dict()
        # override the default output from pydantic by calling `to_dict()` of unnamed_resources_accessed
        if self.unnamed_resources_accessed:
            _dict['unnamed-resources-accessed'] = self.unnamed_resources_accessed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulateTransactionResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "txn-result": PendingTransactionResponse.from_dict(obj["txn-result"]) if obj.get("txn-result") is not None else None,
            "app-budget-consumed": obj.get("app-budget-consumed"),
            "logic-sig-budget-consumed": obj.get("logic-sig-budget-consumed"),
            "exec-trace": SimulationTransactionExecTrace.from_dict(obj["exec-trace"]) if obj.get("exec-trace") is not None else None,
            "unnamed-resources-accessed": SimulateUnnamedResourcesAccessed.from_dict(obj["unnamed-resources-accessed"]) if obj.get("unnamed-resources-accessed") is not None else None,
            "fixed-signer": obj.get("fixed-signer")
        })
        return _obj


