# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from algokit_algod_api.models.account_state_delta import AccountStateDelta
from algokit_algod_api.models.dryrun_state import DryrunState
from algokit_algod_api.models.eval_delta_key_value import EvalDeltaKeyValue
from typing import Optional, Set
from typing_extensions import Self

class DryrunTxnResult(BaseModel):
    """
    DryrunTxnResult contains any LogicSig or ApplicationCall program debug information and state updates from a dryrun.
    """ # noqa: E501
    disassembly: List[StrictStr] = Field(description="Disassembled program line by line.")
    logic_sig_disassembly: Optional[List[StrictStr]] = Field(default=None, description="Disassembled lsig program line by line.", alias="logic-sig-disassembly")
    logic_sig_trace: Optional[List[DryrunState]] = Field(default=None, alias="logic-sig-trace")
    logic_sig_messages: Optional[List[StrictStr]] = Field(default=None, alias="logic-sig-messages")
    app_call_trace: Optional[List[DryrunState]] = Field(default=None, alias="app-call-trace")
    app_call_messages: Optional[List[StrictStr]] = Field(default=None, alias="app-call-messages")
    global_delta: Optional[List[EvalDeltaKeyValue]] = Field(default=None, description="Application state delta.", alias="global-delta")
    local_deltas: Optional[List[AccountStateDelta]] = Field(default=None, alias="local-deltas")
    logs: Optional[List[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]]] = None
    budget_added: Optional[StrictInt] = Field(default=None, description="Budget added during execution of app call transaction.", alias="budget-added")
    budget_consumed: Optional[StrictInt] = Field(default=None, description="Budget consumed during execution of app call transaction.", alias="budget-consumed")
    __properties: ClassVar[List[str]] = ["disassembly", "logic-sig-disassembly", "logic-sig-trace", "logic-sig-messages", "app-call-trace", "app-call-messages", "global-delta", "local-deltas", "logs", "budget-added", "budget-consumed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DryrunTxnResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in logic_sig_trace (list)
        _items = []
        if self.logic_sig_trace:
            for _item_logic_sig_trace in self.logic_sig_trace:
                if _item_logic_sig_trace:
                    _items.append(_item_logic_sig_trace.to_dict())
            _dict['logic-sig-trace'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in app_call_trace (list)
        _items = []
        if self.app_call_trace:
            for _item_app_call_trace in self.app_call_trace:
                if _item_app_call_trace:
                    _items.append(_item_app_call_trace.to_dict())
            _dict['app-call-trace'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in global_delta (list)
        _items = []
        if self.global_delta:
            for _item_global_delta in self.global_delta:
                if _item_global_delta:
                    _items.append(_item_global_delta.to_dict())
            _dict['global-delta'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in local_deltas (list)
        _items = []
        if self.local_deltas:
            for _item_local_deltas in self.local_deltas:
                if _item_local_deltas:
                    _items.append(_item_local_deltas.to_dict())
            _dict['local-deltas'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DryrunTxnResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "disassembly": obj.get("disassembly"),
            "logic-sig-disassembly": obj.get("logic-sig-disassembly"),
            "logic-sig-trace": [DryrunState.from_dict(_item) for _item in obj["logic-sig-trace"]] if obj.get("logic-sig-trace") is not None else None,
            "logic-sig-messages": obj.get("logic-sig-messages"),
            "app-call-trace": [DryrunState.from_dict(_item) for _item in obj["app-call-trace"]] if obj.get("app-call-trace") is not None else None,
            "app-call-messages": obj.get("app-call-messages"),
            "global-delta": [EvalDeltaKeyValue.from_dict(_item) for _item in obj["global-delta"]] if obj.get("global-delta") is not None else None,
            "local-deltas": [AccountStateDelta.from_dict(_item) for _item in obj["local-deltas"]] if obj.get("local-deltas") is not None else None,
            "logs": obj.get("logs"),
            "budget-added": obj.get("budget-added"),
            "budget-consumed": obj.get("budget-consumed")
        })
        return _obj


