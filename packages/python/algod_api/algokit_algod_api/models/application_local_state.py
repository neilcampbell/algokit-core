# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from algokit_algod_api.models.application_state_schema import ApplicationStateSchema
from algokit_algod_api.models.teal_key_value import TealKeyValue
from typing import Optional, Set
from typing_extensions import Self

class ApplicationLocalState(BaseModel):
    """
    Stores local state associated with an application.
    """ # noqa: E501
    id: StrictInt = Field(description="The application which this local state is for.")
    var_schema: ApplicationStateSchema = Field(alias="schema")
    key_value: Optional[List[TealKeyValue]] = Field(default=None, description="Represents a key-value store for use in an application.", alias="key-value")
    __properties: ClassVar[List[str]] = ["id", "schema", "key-value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationLocalState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of var_schema
        if self.var_schema:
            _dict['schema'] = self.var_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in key_value (list)
        _items = []
        if self.key_value:
            for _item_key_value in self.key_value:
                if _item_key_value:
                    _items.append(_item_key_value.to_dict())
            _dict['key-value'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationLocalState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "schema": ApplicationStateSchema.from_dict(obj["schema"]) if obj.get("schema") is not None else None,
            "key-value": [TealKeyValue.from_dict(_item) for _item in obj["key-value"]] if obj.get("key-value") is not None else None
        })
        return _obj


