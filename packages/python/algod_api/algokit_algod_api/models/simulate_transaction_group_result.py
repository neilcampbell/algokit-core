# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from algokit_algod_api.models.simulate_transaction_result import SimulateTransactionResult
from algokit_algod_api.models.simulate_unnamed_resources_accessed import SimulateUnnamedResourcesAccessed
from typing import Optional, Set
from typing_extensions import Self

class SimulateTransactionGroupResult(BaseModel):
    """
    Simulation result for an atomic transaction group
    """ # noqa: E501
    txn_results: List[SimulateTransactionResult] = Field(description="Simulation result for individual transactions", alias="txn-results")
    failure_message: Optional[StrictStr] = Field(default=None, description="If present, indicates that the transaction group failed and specifies why that happened", alias="failure-message")
    failed_at: Optional[List[StrictInt]] = Field(default=None, description="If present, indicates which transaction in this group caused the failure. This array represents the path to the failing transaction. Indexes are zero based, the first element indicates the top-level transaction, and successive elements indicate deeper inner transactions.", alias="failed-at")
    app_budget_added: Optional[StrictInt] = Field(default=None, description="Total budget added during execution of app calls in the transaction group.", alias="app-budget-added")
    app_budget_consumed: Optional[StrictInt] = Field(default=None, description="Total budget consumed during execution of app calls in the transaction group.", alias="app-budget-consumed")
    unnamed_resources_accessed: Optional[SimulateUnnamedResourcesAccessed] = Field(default=None, alias="unnamed-resources-accessed")
    __properties: ClassVar[List[str]] = ["txn-results", "failure-message", "failed-at", "app-budget-added", "app-budget-consumed", "unnamed-resources-accessed"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulateTransactionGroupResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in txn_results (list)
        _items = []
        if self.txn_results:
            for _item_txn_results in self.txn_results:
                if _item_txn_results:
                    _items.append(_item_txn_results.to_dict())
            _dict['txn-results'] = _items
        # override the default output from pydantic by calling `to_dict()` of unnamed_resources_accessed
        if self.unnamed_resources_accessed:
            _dict['unnamed-resources-accessed'] = self.unnamed_resources_accessed.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulateTransactionGroupResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "txn-results": [SimulateTransactionResult.from_dict(_item) for _item in obj["txn-results"]] if obj.get("txn-results") is not None else None,
            "failure-message": obj.get("failure-message"),
            "failed-at": obj.get("failed-at"),
            "app-budget-added": obj.get("app-budget-added"),
            "app-budget-consumed": obj.get("app-budget-consumed"),
            "unnamed-resources-accessed": SimulateUnnamedResourcesAccessed.from_dict(obj["unnamed-resources-accessed"]) if obj.get("unnamed-resources-accessed") is not None else None
        })
        return _obj


