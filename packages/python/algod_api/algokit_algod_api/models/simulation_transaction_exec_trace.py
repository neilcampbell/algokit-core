# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from algokit_algod_api.models.simulation_opcode_trace_unit import SimulationOpcodeTraceUnit
from typing import Optional, Set
from typing_extensions import Self

class SimulationTransactionExecTrace(BaseModel):
    """
    The execution trace of calling an app or a logic sig, containing the inner app call trace in a recursive way.
    """ # noqa: E501
    approval_program_trace: Optional[List[SimulationOpcodeTraceUnit]] = Field(default=None, description="Program trace that contains a trace of opcode effects in an approval program.", alias="approval-program-trace")
    approval_program_hash: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="SHA512_256 hash digest of the approval program executed in transaction.", alias="approval-program-hash")
    clear_state_program_trace: Optional[List[SimulationOpcodeTraceUnit]] = Field(default=None, description="Program trace that contains a trace of opcode effects in a clear state program.", alias="clear-state-program-trace")
    clear_state_program_hash: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="SHA512_256 hash digest of the clear state program executed in transaction.", alias="clear-state-program-hash")
    clear_state_rollback: Optional[StrictBool] = Field(default=None, description="If true, indicates that the clear state program failed and any persistent state changes it produced should be reverted once the program exits.", alias="clear-state-rollback")
    clear_state_rollback_error: Optional[StrictStr] = Field(default=None, description="The error message explaining why the clear state program failed. This field will only be populated if clear-state-rollback is true and the failure was due to an execution error.", alias="clear-state-rollback-error")
    logic_sig_trace: Optional[List[SimulationOpcodeTraceUnit]] = Field(default=None, description="Program trace that contains a trace of opcode effects in a logic sig.", alias="logic-sig-trace")
    logic_sig_hash: Optional[Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]] = Field(default=None, description="SHA512_256 hash digest of the logic sig executed in transaction.", alias="logic-sig-hash")
    inner_trace: Optional[List[SimulationTransactionExecTrace]] = Field(default=None, description="An array of SimulationTransactionExecTrace representing the execution trace of any inner transactions executed.", alias="inner-trace")
    __properties: ClassVar[List[str]] = ["approval-program-trace", "approval-program-hash", "clear-state-program-trace", "clear-state-program-hash", "clear-state-rollback", "clear-state-rollback-error", "logic-sig-trace", "logic-sig-hash", "inner-trace"]

    @field_validator('approval_program_hash')
    def approval_program_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    @field_validator('clear_state_program_hash')
    def clear_state_program_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    @field_validator('logic_sig_hash')
    def logic_sig_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulationTransactionExecTrace from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in approval_program_trace (list)
        _items = []
        if self.approval_program_trace:
            for _item_approval_program_trace in self.approval_program_trace:
                if _item_approval_program_trace:
                    _items.append(_item_approval_program_trace.to_dict())
            _dict['approval-program-trace'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in clear_state_program_trace (list)
        _items = []
        if self.clear_state_program_trace:
            for _item_clear_state_program_trace in self.clear_state_program_trace:
                if _item_clear_state_program_trace:
                    _items.append(_item_clear_state_program_trace.to_dict())
            _dict['clear-state-program-trace'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in logic_sig_trace (list)
        _items = []
        if self.logic_sig_trace:
            for _item_logic_sig_trace in self.logic_sig_trace:
                if _item_logic_sig_trace:
                    _items.append(_item_logic_sig_trace.to_dict())
            _dict['logic-sig-trace'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in inner_trace (list)
        _items = []
        if self.inner_trace:
            for _item_inner_trace in self.inner_trace:
                if _item_inner_trace:
                    _items.append(_item_inner_trace.to_dict())
            _dict['inner-trace'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulationTransactionExecTrace from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "approval-program-trace": [SimulationOpcodeTraceUnit.from_dict(_item) for _item in obj["approval-program-trace"]] if obj.get("approval-program-trace") is not None else None,
            "approval-program-hash": obj.get("approval-program-hash"),
            "clear-state-program-trace": [SimulationOpcodeTraceUnit.from_dict(_item) for _item in obj["clear-state-program-trace"]] if obj.get("clear-state-program-trace") is not None else None,
            "clear-state-program-hash": obj.get("clear-state-program-hash"),
            "clear-state-rollback": obj.get("clear-state-rollback"),
            "clear-state-rollback-error": obj.get("clear-state-rollback-error"),
            "logic-sig-trace": [SimulationOpcodeTraceUnit.from_dict(_item) for _item in obj["logic-sig-trace"]] if obj.get("logic-sig-trace") is not None else None,
            "logic-sig-hash": obj.get("logic-sig-hash"),
            "inner-trace": [SimulationTransactionExecTrace.from_dict(_item) for _item in obj["inner-trace"]] if obj.get("inner-trace") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
SimulationTransactionExecTrace.model_rebuild(raise_errors=False)

