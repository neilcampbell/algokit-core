# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from algokit_algod_api.models.application_state_schema import ApplicationStateSchema
from algokit_algod_api.models.teal_key_value import TealKeyValue
from typing import Optional, Set
from typing_extensions import Self

class ApplicationParams(BaseModel):
    """
    Stores the global information associated with an application.
    """ # noqa: E501
    creator: StrictStr = Field(description="The address that created this application. This is the address where the parameters and global state for this application can be found.")
    approval_program: Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]] = Field(description="\\[approv\\] approval program.", alias="approval-program")
    clear_state_program: Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]] = Field(description="\\[clearp\\] approval program.", alias="clear-state-program")
    extra_program_pages: Optional[StrictInt] = Field(default=None, description="\\[epp\\] the amount of extra program pages available to this app.", alias="extra-program-pages")
    local_state_schema: Optional[ApplicationStateSchema] = Field(default=None, alias="local-state-schema")
    global_state_schema: Optional[ApplicationStateSchema] = Field(default=None, alias="global-state-schema")
    global_state: Optional[List[TealKeyValue]] = Field(default=None, description="Represents a key-value store for use in an application.", alias="global-state")
    __properties: ClassVar[List[str]] = ["creator", "approval-program", "clear-state-program", "extra-program-pages", "local-state-schema", "global-state-schema", "global-state"]

    @field_validator('approval_program')
    def approval_program_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    @field_validator('clear_state_program')
    def clear_state_program_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplicationParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of local_state_schema
        if self.local_state_schema:
            _dict['local-state-schema'] = self.local_state_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of global_state_schema
        if self.global_state_schema:
            _dict['global-state-schema'] = self.global_state_schema.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in global_state (list)
        _items = []
        if self.global_state:
            for _item_global_state in self.global_state:
                if _item_global_state:
                    _items.append(_item_global_state.to_dict())
            _dict['global-state'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplicationParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "creator": obj.get("creator"),
            "approval-program": obj.get("approval-program"),
            "clear-state-program": obj.get("clear-state-program"),
            "extra-program-pages": obj.get("extra-program-pages"),
            "local-state-schema": ApplicationStateSchema.from_dict(obj["local-state-schema"]) if obj.get("local-state-schema") is not None else None,
            "global-state-schema": ApplicationStateSchema.from_dict(obj["global-state-schema"]) if obj.get("global-state-schema") is not None else None,
            "global-state": [TealKeyValue.from_dict(_item) for _item in obj["global-state"]] if obj.get("global-state") is not None else None
        })
        return _obj


