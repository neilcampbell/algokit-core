# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from algokit_algod_api.models.teal_value import TealValue
from typing import Optional, Set
from typing_extensions import Self

class DryrunState(BaseModel):
    """
    Stores the TEAL eval step data
    """ # noqa: E501
    line: StrictInt = Field(description="Line number")
    pc: StrictInt = Field(description="Program counter")
    stack: List[TealValue]
    scratch: Optional[List[TealValue]] = None
    error: Optional[StrictStr] = Field(default=None, description="Evaluation error if any")
    __properties: ClassVar[List[str]] = ["line", "pc", "stack", "scratch", "error"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DryrunState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in stack (list)
        _items = []
        if self.stack:
            for _item_stack in self.stack:
                if _item_stack:
                    _items.append(_item_stack.to_dict())
            _dict['stack'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in scratch (list)
        _items = []
        if self.scratch:
            for _item_scratch in self.scratch:
                if _item_scratch:
                    _items.append(_item_scratch.to_dict())
            _dict['scratch'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DryrunState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "line": obj.get("line"),
            "pc": obj.get("pc"),
            "stack": [TealValue.from_dict(_item) for _item in obj["stack"]] if obj.get("stack") is not None else None,
            "scratch": [TealValue.from_dict(_item) for _item in obj["scratch"]] if obj.get("scratch") is not None else None,
            "error": obj.get("error")
        })
        return _obj


