# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from algokit_algod_api.models.simulate_initial_states import SimulateInitialStates
from algokit_algod_api.models.simulate_trace_config import SimulateTraceConfig
from algokit_algod_api.models.simulate_transaction_group_result import SimulateTransactionGroupResult
from algokit_algod_api.models.simulation_eval_overrides import SimulationEvalOverrides
from typing import Optional, Set
from typing_extensions import Self

class SimulateTransaction200Response(BaseModel):
    """
    SimulateTransaction200Response
    """ # noqa: E501
    version: StrictInt = Field(description="The version of this response object.")
    last_round: StrictInt = Field(description="The round immediately preceding this simulation. State changes through this round were used to run this simulation.", alias="last-round")
    txn_groups: List[SimulateTransactionGroupResult] = Field(description="A result object for each transaction group that was simulated.", alias="txn-groups")
    eval_overrides: Optional[SimulationEvalOverrides] = Field(default=None, alias="eval-overrides")
    exec_trace_config: Optional[SimulateTraceConfig] = Field(default=None, alias="exec-trace-config")
    initial_states: Optional[SimulateInitialStates] = Field(default=None, alias="initial-states")
    __properties: ClassVar[List[str]] = ["version", "last-round", "txn-groups", "eval-overrides", "exec-trace-config", "initial-states"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulateTransaction200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in txn_groups (list)
        _items = []
        if self.txn_groups:
            for _item_txn_groups in self.txn_groups:
                if _item_txn_groups:
                    _items.append(_item_txn_groups.to_dict())
            _dict['txn-groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of eval_overrides
        if self.eval_overrides:
            _dict['eval-overrides'] = self.eval_overrides.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exec_trace_config
        if self.exec_trace_config:
            _dict['exec-trace-config'] = self.exec_trace_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_states
        if self.initial_states:
            _dict['initial-states'] = self.initial_states.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulateTransaction200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "version": obj.get("version"),
            "last-round": obj.get("last-round"),
            "txn-groups": [SimulateTransactionGroupResult.from_dict(_item) for _item in obj["txn-groups"]] if obj.get("txn-groups") is not None else None,
            "eval-overrides": SimulationEvalOverrides.from_dict(obj["eval-overrides"]) if obj.get("eval-overrides") is not None else None,
            "exec-trace-config": SimulateTraceConfig.from_dict(obj["exec-trace-config"]) if obj.get("exec-trace-config") is not None else None,
            "initial-states": SimulateInitialStates.from_dict(obj["initial-states"]) if obj.get("initial-states") is not None else None
        })
        return _obj


