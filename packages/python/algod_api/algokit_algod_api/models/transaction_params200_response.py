# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class TransactionParams200Response(BaseModel):
    """
    TransactionParams contains the parameters that help a client construct a new transaction.
    """ # noqa: E501
    consensus_version: StrictStr = Field(description="ConsensusVersion indicates the consensus protocol version as of LastRound.", alias="consensus-version")
    fee: StrictInt = Field(description="Fee is the suggested transaction fee Fee is in units of micro-Algos per byte. Fee may fall to zero but transactions must still have a fee of at least MinTxnFee for the current network protocol.")
    genesis_hash: Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]] = Field(description="GenesisHash is the hash of the genesis block.", alias="genesis-hash")
    genesis_id: StrictStr = Field(description="GenesisID is an ID listed in the genesis block.", alias="genesis-id")
    last_round: StrictInt = Field(description="LastRound indicates the last round seen", alias="last-round")
    min_fee: StrictInt = Field(description="The minimum transaction fee (not per byte) required for the txn to validate for the current network protocol.", alias="min-fee")
    __properties: ClassVar[List[str]] = ["consensus-version", "fee", "genesis-hash", "genesis-id", "last-round", "min-fee"]

    @field_validator('genesis_hash')
    def genesis_hash_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TransactionParams200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TransactionParams200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "consensus-version": obj.get("consensus-version"),
            "fee": obj.get("fee"),
            "genesis-hash": obj.get("genesis-hash"),
            "genesis-id": obj.get("genesis-id"),
            "last-round": obj.get("last-round"),
            "min-fee": obj.get("min-fee")
        })
        return _obj


