# coding: utf-8

"""
    Algod REST API.

    API endpoint for algod operations.

    The version of the OpenAPI document: 0.0.1
    Contact: contact@algorand.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class SimulationEvalOverrides(BaseModel):
    """
    The set of parameters and limits override during simulation. If this set of parameters is present, then evaluation parameters may differ from standard evaluation in certain ways.
    """ # noqa: E501
    allow_empty_signatures: Optional[StrictBool] = Field(default=None, description="If true, transactions without signatures are allowed and simulated as if they were properly signed.", alias="allow-empty-signatures")
    allow_unnamed_resources: Optional[StrictBool] = Field(default=None, description="If true, allows access to unnamed resources during simulation.", alias="allow-unnamed-resources")
    max_log_calls: Optional[StrictInt] = Field(default=None, description="The maximum log calls one can make during simulation", alias="max-log-calls")
    max_log_size: Optional[StrictInt] = Field(default=None, description="The maximum byte number to log during simulation", alias="max-log-size")
    extra_opcode_budget: Optional[StrictInt] = Field(default=None, description="The extra opcode budget added to each transaction group during simulation", alias="extra-opcode-budget")
    fix_signers: Optional[StrictBool] = Field(default=None, description="If true, signers for transactions that are missing signatures will be fixed during evaluation.", alias="fix-signers")
    __properties: ClassVar[List[str]] = ["allow-empty-signatures", "allow-unnamed-resources", "max-log-calls", "max-log-size", "extra-opcode-budget", "fix-signers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulationEvalOverrides from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulationEvalOverrides from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "allow-empty-signatures": obj.get("allow-empty-signatures"),
            "allow-unnamed-resources": obj.get("allow-unnamed-resources"),
            "max-log-calls": obj.get("max-log-calls"),
            "max-log-size": obj.get("max-log-size"),
            "extra-opcode-budget": obj.get("extra-opcode-budget"),
            "fix-signers": obj.get("fix-signers")
        })
        return _obj


