name: Python API Client CI/CD

on:
  workflow_call:
    inputs:
      api:
        required: true
        type: string
        description: "The name of the api client to build and publish"
      release:
        required: false
        type: boolean
        default: false
        description: "Whether to run release steps"
    secrets:
      BOT_ID:
        required: true
      BOT_SK:
        required: true

permissions:
  contents: write # to make commits
  actions: write # to upload artifacts
  issues: write # to be able to comment on released issues
  pull-requests: write # to be able to comment on released pull requests

env:
  PACKAGE_DIR: packages/python/${{ inputs.api }}

jobs:
  get_version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.semantic_release.outputs.tag }}
      version: ${{ steps.semantic_release.outputs.version }}
      version_commit_sha: ${{ steps.set_version_commit_sha.outputs.version_commit_sha }}
    defaults:
      run:
        working-directory: ${{ env.PACKAGE_DIR }}
    steps:
      - uses: actions/create-github-app-token@v1
        if: inputs.release
        id: app_token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - working-directory: "."
        run: bun install --frozen-lockfile
        if: inputs.release
      - name: Semantic Release (dry-run)
        if: inputs.release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
        run: bun semantic-release --dry-run
      - name: Convert to Python Version
        if: steps.semantic_release.outputs.version != ''
        id: convert_version
        uses: ./.github/actions/as-python-version
        with:
          version: ${{ steps.semantic_release.outputs.version }}
      - name: Update version in openapi-config.yaml
        working-directory: "."
        if: steps.semantic_release.outputs.version != ''
        run: |
          sed -i 's/packageVersion: .*/packageVersion: "${{ steps.convert_version.outputs.version }}"/' api/oas_templates/python/openapi-config.yaml
      - working-directory: api
        run: |
          bun install --frozen-lockfile
          bun run generate:${{ inputs.api }}:py
      - name: Commit version bump
        if: steps.semantic_release.outputs.version != ''
        working-directory: "."
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          git config user.name "neilcampbell-auth[bot]"
          git config user.email "211775805+neilcampbell-auth[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore(python/${{ inputs.api }}): bump version to ${{ steps.semantic_release.outputs.version }}"
          git push
          echo "VERSION_COMMIT_SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Set version commit SHA output
        if: steps.semantic_release.outputs.version != ''
        id: set_version_commit_sha
        run: echo "version_commit_sha=${VERSION_COMMIT_SHA}" >> $GITHUB_OUTPUT

  build_and_test:
    needs: get_version
    if: ${{ !inputs.release || needs.get_version.outputs.version != '' }}
    defaults:
      run:
        shell: bash
    runs-on: ubuntu-latest
    steps:
      - uses: actions/create-github-app-token@v1
        if: inputs.release
        id: app_token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: 1.85.0

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
      - run: bun install --frozen-lockfile

      - name: Generate client
        working-directory: api
        run: |
          bun install --frozen-lockfile
          bun run generate:${{ inputs.api }}:py
      - name: Check generated clients have been reviewed
        shell: bash
        run: |
          # Add untracked files as empty so they come up in diff
          git add -N ${{ env.PACKAGE_DIR }}
          # Look for changes in generated templates and error if there are any
          git diff --exit-code --minimal ${{ env.PACKAGE_DIR }}

      - name: Install poetry
        run: pipx install poetry

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - working-directory: ${{ env.PACKAGE_DIR }}
        run: poetry install
      - name: Build wheel
        working-directory: ${{ env.PACKAGE_DIR }}
        run: poetry build --format wheel

      - name: Install AlgoKit
        run: pipx install algokit
      - name: Start localnet
        run: algokit localnet start
      - name: Test
        working-directory: ${{ env.PACKAGE_DIR }}
        run: poetry run pytest

      - name: Upload build artifacts
        if: inputs.release
        uses: actions/upload-artifact@v4
        with:
          name: algokit_${{ inputs.api }}-wheel
          path: ${{ env.PACKAGE_DIR }}/dist/*-py3-none-any.whl
          if-no-files-found: error

  release:
    if: inputs.release && needs.get_version.outputs.version != ''
    needs:
      - get_version
      - build_and_test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PACKAGE_DIR }}
    steps:
      - uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - working-directory: "."
        run: bun install

      - name: Semantic Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
        run: bun semantic-release

  cleanup:
    if: inputs.release && (failure() || cancelled())
    runs-on: ubuntu-latest
    needs:
      - get_version
      - build_and_test
      - release
    steps:
      - uses: actions/create-github-app-token@v1
        id: app_token
        with:
          app-id: ${{ secrets.BOT_ID }}
          private-key: ${{ secrets.BOT_SK }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}
          fetch-depth: 0
      - name: Reset branch
        if: needs.get_version.outputs.version_commit_sha != ''
        env:
          GITHUB_TOKEN: ${{ steps.app_token.outputs.token }}
        run: |
          git config user.name "neilcampbell-auth[bot]"
          git config user.email "211775805+neilcampbell-auth[bot]@users.noreply.github.com"
          git revert --no-commit ${{ needs.get_version.outputs.version_commit_sha }}
          git commit -m "chore(python/${{ inputs.api }}): revert version commit made by CI due to failure" -m "failed run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          git push
